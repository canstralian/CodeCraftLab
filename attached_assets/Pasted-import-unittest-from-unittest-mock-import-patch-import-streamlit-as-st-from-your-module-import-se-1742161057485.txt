import unittest
from unittest.mock import patch
import streamlit as st
from your_module import set_page_config, display_sidebar  # Replace 'your_module' with the actual module name

class TestStreamlitApp(unittest.TestCase):
    """
    A suite of test cases for the Streamlit app to ensure correct initialization,
    session state management, and display of components.
    """

    @patch('streamlit.title')
    @patch('streamlit.markdown')
    @patch('streamlit.subheader')
    @patch('streamlit.columns')
    @patch('streamlit.metric')
    @patch('utils.set_page_config')
    @patch('utils.display_sidebar')
    def test_app_initialization(self, mock_display_sidebar, mock_set_page_config, mock_metric, mock_columns, mock_subheader, mock_markdown, mock_title):
        """
        Test Case: Ensure the Streamlit app initializes correctly.
        Expectation: The app title, markdown, and sidebar should be displayed.
        """
        # Call the main app code (which should be in a function for testing)
        # For example: main_app()  # Uncomment and replace with actual function call
        
        mock_set_page_config.assert_called_once()
        mock_title.assert_called_once_with("CodeGen Hub")
        mock_markdown.assert_called_once()
        mock_display_sidebar.assert_called_once()

    @patch('streamlit.session_state', new_callable=dict)
    def test_session_state_initialization(self, mock_session_state):
        """
        Test Case: Ensure session state variables are initialized correctly.
        Expectation: The session state should contain the expected keys and values.
        """
        # Simulate the app initialization code
        if 'datasets' not in mock_session_state:
            mock_session_state['datasets'] = {}
        if 'trained_models' not in mock_session_state:
            mock_session_state['trained_models'] = {}
        if 'training_logs' not in mock_session_state:
            mock_session_state['training_logs'] = []
        if 'training_progress' not in mock_session_state:
            mock_session_state['training_progress'] = {}

        self.assertIn('datasets', mock_session_state)
        self.assertIn('trained_models', mock_session_state)
        self.assertIn('training_logs', mock_session_state)
        self.assertIn('training_progress', mock_session_state)

    @patch('streamlit.metric')
    @patch('streamlit.session_state', new_callable=dict)
    def test_platform_statistics_display(self, mock_session_state, mock_metric):
        """
        Test Case: Ensure platform statistics are displayed correctly.
        Expectation: The metrics for datasets, trained models, and active jobs should be displayed.
        """
        mock_session_state['datasets'] = {'dataset1': 'data1', 'dataset2': 'data2'}
        mock_session_state['trained_models'] = {'model1': 'trained_model1'}
        mock_session_state['training_progress'] = {
            'job1': {'status': 'running'},
            'job2': {'status': 'completed'},
            'job3': {'status': 'running'}
        }

        # Simulate the display of metrics
        st.metric("Datasets Available", len(mock_session_state['datasets']))
        st.metric("Trained Models", len(mock_session_state['trained_models']))
        active_jobs = sum(1 for progress in mock_session_state['training_progress'].values() 
                          if progress.get('status') == 'running')
        st.metric("Active Training Jobs", active_jobs)

        mock_metric.assert_any_call("Datasets Available", 2)
        mock_metric.assert_any_call("Trained Models", 1)
        mock_metric.assert_any_call("Active Training Jobs", 2)

    @patch('streamlit.info')
    def test_getting_started_section_display(self, mock_info):
        """
        Test Case: Ensure the 'Getting Started' section displays instructions correctly.
        Expectation: The info boxes should be displayed with the correct instructions.
        """
        # Simulate the display of instructions
        st.info("1. üìä Start by uploading or selecting a Python code dataset in the **Dataset Management** section.")
        st.info("2. üõ†Ô∏è Configure and train your model in the **Model Training** section.")
        st.info("3. üí° Generate code predictions using your trained models in the **Code Generation** section.")
        st.info("4. üîÑ Access your models on Hugging Face Hub for broader use.")

        self.assertEqual(mock_info.call_count, 4)
        mock_info.assert_any_call("1. üìä Start by uploading or selecting a Python code dataset in the **Dataset Management** section.")
        mock_info.assert_any_call("2. üõ†Ô∏è Configure and train your model in the **Model Training** section.")
        mock_info.assert_any_call("3. üí° Generate code predictions using your trained models in the **Code Generation** section.")
        mock_info.assert_any_call("4. üîÑ Access your models on Hugging Face Hub for broader use.")

if __name__ == '__main__':
    unittest.main()